import { test, expect } from "@playwright/test";
import type { ITopicQuery } from "nolagjs";
import { example_api_tunnel_topic_list } from "../../SDK/API/tunnel_topics/example_api_tunnel_topic_list";

export interface IApiTopicList {
  tunnelId: string;
  topicName: string;
  yourProjectApiKey: string;
  noLagDeveloperTestConfigIgnore: Record<any, any>;
}

export const shouldRetrieveAListOfTunnels = async ({
  tunnelId,
  yourProjectApiKey,
  noLagDeveloperTestConfigIgnore,
}: IApiTopicList) => {
  const topicQuery: ITopicQuery = {};
  return example_api_tunnel_topic_list({
    topicQuery,
    yourProjectApiKey,
    noLagDeveloperTestConfigIgnore,
    tunnelId,
  });
};

export const queryForASpecificTopicName = async ({
                                                     tunnelId,
                                                   topicName
                                                     yourProjectApiKey,
                                                     noLagDeveloperTestConfigIgnore,
                                                   }: IApiTopicList) => {
  const topicQuery: ITopicQuery = {
    name: topicName
  };
  return example_api_tunnel_topic_list({
    topicQuery,
    yourProjectApiKey,
    noLagDeveloperTestConfigIgnore,
    tunnelId,
  });
};

test.describe("Playwright Api List Tunnels", () => {
  test("query for a specific topic name", async ({ page }) => {
    topicQuery.search = globalVars.topic.name;

    const response = await example_api_tunnel_topic_list({
      topicQuery,
      yourProjectApiKey,
      noLagDeveloperTestConfigIgnore,
      tunnelId,
    });

    const foundTunnel = response.records?.[0];

    if (!foundTunnel) {
      expect(false).toBeTruthy();
      return;
    }

    expect(foundTunnel?.name).toBe(globalVars.topic.name);
  });
});
